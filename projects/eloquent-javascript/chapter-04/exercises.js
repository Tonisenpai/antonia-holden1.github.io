////////////////////////////////////////////////////////////////////////////////
// range ///////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function range(start, end, step) {
  if (start === end) {
    return [];
  }
  // initialize output array variable
  var rangeArr = [];
  // if step is not present, do this code
  if (step === undefined) {
    // create a for loop that counts from start to end
    for (let i = start; i <= end; i++) {
      // do what makes sure the output array is populated with values
      rangeArr.push(i);
    } 
  } else {
    // if step is negative
    if (step < 0) {
      return [];
    } else {
      // create a for loop that counts from start to end
      for (let i= start; i <= end; i += step) {
        rangeArr.push(i);
      }
    }
  }

  // return rangeArr
  return rangeArr;
}

////////////////////////////////////////////////////////////////////////////////
// sum /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function sum(array) {
    var arrayTotal = 0;
    nums = array.length;
    for ( var i = 0; i < nums; i ++ ) {
      arrayTotal += array[i];
    }
    return arrayTotal;
}

////////////////////////////////////////////////////////////////////////////////
// reverseArray ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArray(array) {
  let reverseArray = [];
  for (let i = array.length - 1; i >= 0; i--) {
    reverseArray.push((array[i]));
  }
  return reverseArray;
}

////////////////////////////////////////////////////////////////////////////////
// reverseArrayInPlace /////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArrayInPlace(array) {
  var i = 0;
  while (i < array.length - 1) {
    array.splice(i, 0, array.pop());
    i++;
  }
  return array;
}

////////////////////////////////////////////////////////////////////////////////
// arrayToList /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function arrayToList(array) {
  var rest = null;
  for (var i = array.length - 1; i >= 0; i--) {
      rest = {value: array[i], rest};
  }
  return rest;
}

////////////////////////////////////////////////////////////////////////////////
// listToArray /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function listToArray(list, arr = []) {
  if (list.rest === null) {
    arr.push(list.value);
    return arr;
  }
  arr.push(list.value);
  return listToArray(list.rest, arr);
}

////////////////////////////////////////////////////////////////////////////////
// prepend /////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function prepend(val, obj) {
  return {
    value: val,
    rest: obj
  }
}

////////////////////////////////////////////////////////////////////////////////
// nth /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function nth(list, n) {
  // use recursion // n === 0
  // edge case
  if (n < 0) {
    return undefined;
  }
  // base case
  if (n === 0) {
    return list.value;
  }
  // recursion
  return nth(list.rest, n - 1); // n - 1 will ensure that "n" will reach the base case
}

////////////////////////////////////////////////////////////////////////////////
// deepEqual ///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function deepEqual(val1, val2) {
  // if both values are not objects, compare them directly
  if (typeof val1 !== 'object' && typeof val2 !== "object") {
    return val1 === val2;
  }
  // create arrays of objects keys
  var keys1 = Object.keys(val1); // ['a', 'b']; [test]
  var keys2 = Object.keys(val2); // ['a', 'b']; [test]

  //determine if the keys arrays are the same length, if not return false
  if (keys1.length !== keys2.length) {
    return false;
  }

  // iterate through the keys arrays
  for (var i = 0; i < keys1.length; i++) {
    // does keys2 include the current key from keys1?
    // keys includes('a')
    if (!keys2.includes(keys1) || !deepEqual(val1[keys1[i]], val2[keys2[i]])) {
      // keys.includes('a')
      return false;
    }
  }
  return true;
}

////////////////////////////////////////////////////////////////////////////////
// DON'T REMOVE THIS CODE //////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    range,
    sum,
    reverseArray,
    reverseArrayInPlace,
    arrayToList,
    listToArray,
    prepend,
    nth,
    deepEqual,
  };
};
